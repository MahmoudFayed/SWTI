{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SWTI Docs The SWTI library is made out of 4 static objects. Cursor which is used for printing colorful text on screen Keyboard which is used for detecting user keyboard input Mouse which is used for detecting user mouse input Window which is used for resizing window These four objects have in total about 40 methods to with console. Instalation The installation of SWTI library is easy. Download this repository and copy the folder SWTI/swti to your project folder. It contains header and source code for the library. In your application, include a header \"#include swti/swti.hpp\" . Visual Studio - you will need to add header and source files to your project. Right click on the right folder header files and add existing file and choose SWTI/swti.h . Do the same for source files and add SWTI/swti.cpp . Code Blocks - click the left pane folders and add existing header and source files to your project. G++ Console - You can then use following two commands g++ -c main.cpp swti/swti.cpp and g++ -o main.exe main.o swti.o to compile your project. Change main.cpp and main.exe to whatever you prefer. Hello world You can use this simple example to ensure that SWTI library is installed correctly. Following code writes colorful Hello world on a specified position. It uses the Cursor object and methods setColor and setPosition. #include <iostream> #include \"swti/swti.hpp\" int main() { Cursor.setColor(YELLOW); Cursor.setPosition(5, 2); std::cout << \"Hello world!\" << std::endl; } Troubleshooting If something doesn't work try to create a new project without additional libraries other than SWTI. If you succeed, problem is probably collision function names in the library. In C++ two functions or objects that have similar name cannot be used. To solve the issue, you can create a namespace for swti, in this namespace include a swti header and the source file. #include <iostream> namespace swti { #include \"swti/swti.hpp\" #include \"swti/swti.cpp\" // source is needed } int main() { swti::Color color = swti::LIGHTGREEN; swti::Cursor.setColor(color); std::cout << \"SWTI Works!\\n\"; } You now need to use the swti:: notation before any function or object. Now everything should work and if not please add your problem in issues .","title":"Home"},{"location":"#welcome-to-swti-docs","text":"The SWTI library is made out of 4 static objects. Cursor which is used for printing colorful text on screen Keyboard which is used for detecting user keyboard input Mouse which is used for detecting user mouse input Window which is used for resizing window These four objects have in total about 40 methods to with console.","title":"Welcome to SWTI Docs"},{"location":"#instalation","text":"The installation of SWTI library is easy. Download this repository and copy the folder SWTI/swti to your project folder. It contains header and source code for the library. In your application, include a header \"#include swti/swti.hpp\" . Visual Studio - you will need to add header and source files to your project. Right click on the right folder header files and add existing file and choose SWTI/swti.h . Do the same for source files and add SWTI/swti.cpp . Code Blocks - click the left pane folders and add existing header and source files to your project. G++ Console - You can then use following two commands g++ -c main.cpp swti/swti.cpp and g++ -o main.exe main.o swti.o to compile your project. Change main.cpp and main.exe to whatever you prefer.","title":"Instalation"},{"location":"#hello-world","text":"You can use this simple example to ensure that SWTI library is installed correctly. Following code writes colorful Hello world on a specified position. It uses the Cursor object and methods setColor and setPosition. #include <iostream> #include \"swti/swti.hpp\" int main() { Cursor.setColor(YELLOW); Cursor.setPosition(5, 2); std::cout << \"Hello world!\" << std::endl; }","title":"Hello world"},{"location":"#troubleshooting","text":"If something doesn't work try to create a new project without additional libraries other than SWTI. If you succeed, problem is probably collision function names in the library. In C++ two functions or objects that have similar name cannot be used. To solve the issue, you can create a namespace for swti, in this namespace include a swti header and the source file. #include <iostream> namespace swti { #include \"swti/swti.hpp\" #include \"swti/swti.cpp\" // source is needed } int main() { swti::Color color = swti::LIGHTGREEN; swti::Cursor.setColor(color); std::cout << \"SWTI Works!\\n\"; } You now need to use the swti:: notation before any function or object. Now everything should work and if not please add your problem in issues .","title":"Troubleshooting"},{"location":"about/","text":"About Contributing You can improve the library by contributing to it. If you find a bug, please write it in issues . You can also write a code for a new useful function and add a merge request . Keep in mind the function has to be usable in any applications or game. By excluding too specific functions makes library simple to learn and easy to use. Credits This library is currently maintained by one person. Feel free to contribute . License The library is licensed under MIT License . You can use the code in any application, but without warranty. That means you can make any application with the library but I am not responsible for any crashes and further problems.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#contributing","text":"You can improve the library by contributing to it. If you find a bug, please write it in issues . You can also write a code for a new useful function and add a merge request . Keep in mind the function has to be usable in any applications or game. By excluding too specific functions makes library simple to learn and easy to use.","title":"Contributing"},{"location":"about/#credits","text":"This library is currently maintained by one person. Feel free to contribute .","title":"Credits"},{"location":"about/#license","text":"The library is licensed under MIT License . You can use the code in any application, but without warranty. That means you can make any application with the library but I am not responsible for any crashes and further problems.","title":"License"},{"location":"examples/app/","text":"Windows app This is a simple example how to characters from international alphabets. Please check original answer SetConsoleOutputCP(CP_UTF8); setvbuf(stdout, nullptr, \\_IOFBF, 1000); std::string test = u8\"Greek: \u03b1\u03b2\u03b3\u03b4; German: \u00dcbergr\u00f6\u00dfentr\u00e4ger\"; std::cout << test << std::endl;","title":"Window app"},{"location":"examples/app/#windows-app","text":"This is a simple example how to characters from international alphabets. Please check original answer SetConsoleOutputCP(CP_UTF8); setvbuf(stdout, nullptr, \\_IOFBF, 1000); std::string test = u8\"Greek: \u03b1\u03b2\u03b3\u03b4; German: \u00dcbergr\u00f6\u00dfentr\u00e4ger\"; std::cout << test << std::endl;","title":"Windows app"},{"location":"examples/chess/","text":"Chess game","title":"Chess game"},{"location":"examples/chess/#chess-game","text":"","title":"Chess game"},{"location":"examples/start/","text":"Start example You can use folowing code to ensure that all the objects are working. This code writes on screen a yellow text and when a colors it when mouse hovers over it. #include <iostream> #include \"swti/swti.h\" int main() { Window.hideBlinking(); Window.hideSelection(); while(!Keyboard.get(VK_ESCAPE)) { if (Mouse.getRows() == 2) Cursor.setColor(LIGHTGREEN); else Cursor.setColor(YELLOW); Cursor.setPosition(5,2); std::cout << \"Start the application\"; Keyboard.wait(30); } }","title":"Begginer app"},{"location":"examples/start/#start-example","text":"You can use folowing code to ensure that all the objects are working. This code writes on screen a yellow text and when a colors it when mouse hovers over it. #include <iostream> #include \"swti/swti.h\" int main() { Window.hideBlinking(); Window.hideSelection(); while(!Keyboard.get(VK_ESCAPE)) { if (Mouse.getRows() == 2) Cursor.setColor(LIGHTGREEN); else Cursor.setColor(YELLOW); Cursor.setPosition(5,2); std::cout << \"Start the application\"; Keyboard.wait(30); } }","title":"Start example"},{"location":"wiki/cursor/","text":"Cursor Cursor writes in console window all text. You can change its position, color and font. Table of Set functions bool setPosition(int x, int y) bool setColor(Color foreground, Color background=CURRENT) bool setFontSize(int size) bool setFontChars(int columns, int rows) bool setFontPixels(int width, int height) bool setFontType(std::string name) Table of Printing functions bool printChar(int x, int y, int character, Color color=CURRENT) bool printBlank(int x, int y) bool clearScreen() Table of Get functions int getX() int getY() int getColorForeground() int getColorBackground() int getFontWidth() int getFontHeight() std::string getFontType() Information Position The cursor position indicates where text is going to be written. It is used every time you write a text. It is changed automatically but setting it manually provides a useful custom functionality. The unit of position is a single character . You set position of cursor by calling a function with specified number of columns and rows . The top left corner of the window is marked as [0,0] or more precisely columns = 0 and rows = 0 . The opposite bottom right corner is obtained using Window functions. The character count of the window tells you many characters you can write in the current console without. Characters are not screen pixels . The actual character size in pixels depends on many factors including screen size and font size . The default value is about 16\u00d724 pixels large. Check out font for more information. Color Cursor color can be used to highlight different texts and to make simple graphics. There are 16 different colors to choose from. They are defined in as an integer enumeration called Color . This means you use Color constants only by their name without using object notation. Color Constant HEX value Color Constant HEX value BLACK #0c0c0c GRAY #767676 BLUE #0037da LIGHTBLUE #3b78ff GREEN #13a10e LIGHTGREEN #16c60c CYAN #3a96dd LIGHTCYAN #61d6d6 RED #c50f1f LIGHTRED #e74856 MAGENTA #881798 LIGHTMAGENTA #b4009e YELLOW #c19c00 LIGHTYELLOW #f9f1a5 LIGHTGRAY #cccccc WHITE #f2f2f2 CURRENT is a special type of color. It is the color which is at the moment in use. Font Font includes font size and font type. You can't have in one application characters of different sizes and fonts. Setting font changes all text in console therefore should be called at the start of the application. A good practice is to change a font only at the start of an application. Font size is measured by size of one character. When setting a new font size you should be using a setFontSize() or setFontChars() . These functions change font size in respect of the console window size. It makes porting application to different screen size much more easier. For headers and large texts you can use a ASCII Text generator. When printing any ascii art, do not forget to add escape characters. Change all \\ to \\\\ . using namespace std; // use standard library for output cout << \" _____ _____ _____ _______ _________ _____ \" << endl; cout << \" /\\\\ / ____|_ _|_ _| / ____\\\\ \\\\ / /__ __|_ _| \" << endl; cout << \" / \\\\ | | | | | | | (___ \\\\ \\\\ /\\\\ / / | | | | \" << endl; cout << \" / /\\\\ \\\\| | | | | | \\\\___ \\\\ \\\\ \\\\/ \\\\/ / | | | |\" << endl; cout << \" / ____ \\\\ |____ _| |_ _| |_ ____) | \\\\ /\\\\ / | | _| |_ \" << endl; cout << \"/_/ \\\\_\\\\_____|_____|_____| |_____/ \\\\/ \\\\/ |_| |_____| \" << endl; Font type is style of characters. Different font families exists and you can choose whichever you prefer. You can use only one type of font in console. Windows console supports many monospace fonts with most usable being Consolas , Courier , Lucida Console , MS Gothic , Terminal . You can also try some proportional fonts like Arial , Times New Roman , Tahoma , Impact , Modern , Roman , Symbol , Segoe UI . However some of these are a little bit glitchy and should be used with caution. These are not all the fonts types and you can try other names. Constants The new versions of windows console stopped supporting ascii characters. You can use UTF instead . You can also use following constants in your code. These are the only few characters that will work in both new and old console. Instead of writing Cursor.printChar(197) you can use Cursor.printChar(LINE_HV) . Char Constant Description Char Constant Description \u2500 LINE_H horizontal \u2550 DLINE_H horizontal \u2502 LINE_V vertical \u2551 DLINE_V vertical \u2510 LINE_UR up right \u2557 DLINE_UR up right \u250c LINE_UL up left \u2554 DLINE_UL up left \u2518 LINE_DR down right \u255d DLINE_DR down right \u2514 LINE_DL down left \u255a DLINE_DL down left \u2534 LINE_HU horizontal up \u2569 DLINE_HU horizon \u252c LINE_HD horizontal down \u2566 DLINE_HD horizontal down \u251c LINE_VR vertical right \u2560 DLINE_VR vertical right \u2524 LINE_VL vertical left \u2563 DLINE_VL vertical left \u253c LINE_HV crossed lines \u256c DLINE_HV crossed lines FILL_B blank \u00ab SHIFT_L left bracket \u2591 FILL_L low dotted \u00bb SHIFT_R right bracket \u2592 FILL_M medium dotted \u2584 SQUARE_D square down \u2593 FILL_H high dotted \u2580 SQUARE_U square up \u2588 FILL_F full \u25a0 SQUARE_M square middle Examples Following example writes colorful Hello world on screen on specified position. Cursor.setPosition(5,2); Cursor.setColor(YELLOW); std::cout << \"Hello world!\" << std::endl; These are examples where you can use colors. Cursor.setColor(MAGENTA, LIGHTCYAN); Cursor.printChar(12, 3, 'D', GREEN); Cursor.printChar(12, 3, FILL_F, GREEN); Window.setColor(BLACK, WHITE); These are examples where you can use font. Cursor.setFontSize(22); Cursor.setFontType(\"Lucida Console\"); std::cout << \"Printing some text\"; Functions bool setPosition(int x, int y) This function sets the position of cursor. When you call any standard function to print a text, first character will be on the set position. Next characters will continue right and down. The cursor position will not change if given position is outside the console window. Parameters int x - position in columns int y - position in rows Return value Return type is bool . Return value is true if position was set successfully or position is outside the console window. Return value is false if unexpected error occurs. Example This example sets the cursor position to coordinates [12, 8] and writes there using C++ standard output, printf and putchar. Cursor.setPosition(12, 8); std::cout << \"Hello \"; printf(\"world\"); putchar('!'); bool setColor(Color foreground, Color background=CURRENT) This function sets the color of cursor. It changes the foreground color of the printed characters and optionally you can also specify a background color. This function doesn't change already written characters (you can use Window.setColor for that). Parameters Color - any Color constant, foreground text color Color - (optional) any Color , default is CURRENT, background text color Return value Return type is bool . Return value is true if color was set successfully, false if any error occurs. Example This example writes two texts on the screen. First is a yellow text without specific background color, second is magenta text with light cyan background. Cursor.setColor(YELLOW); std::cout << \"Yellow text without background color\"; Cursor.setColor(MAGENTA, LIGHTCYAN); std::cout << \"Magenta text on light cyan background\"; bool setFontSize(int size) This function sets the height of characters in console. It calculates size proportionally to current screen size. It is the most convenient and easy way to set the font size. Setting font size changes all text in console. Parameters int - new character height. Size 15 is approximately 1/50 of the console height. Return value Return type is bool . Return value is true if font was set successfully, false if any error occurs. Example This example writes a text on screen with size of 28. Then it waits for user input. After user presses a key, it resizes the console size and adjusts the font size to new console size. Cursor.setFontSize(28); std::cout << \"Press a key to change the screen size...\" << std::endl; Keyboard.waitUser(); Window.setSizePixels(1280,720); Cursor.setFontSize(28); bool setFontChars(int columns, int rows) This function sets the font size in console. It calculates size proportionally to a given screen columns and rows. Setting font size changes all text in console. Parameters int - at most how many columns will font occupy int - at most how many rows will font occupy Return value Return type is bool . Return value is true if font was set successfully, false if any error occurs. Example This example sets the font to squares and writes a filled tic tac toe board. Window.setSizeChars(100, 50); Cursor.setFontChars(50, 50); std::cout << \"XOX\\nOXO\\nXOX\" << std::endl; bool setFontPixels(int width, int height) This function sets the font size in console. It sets the font equal to pixels. The result of this function depends heavily on console screen size in pixels. You probably should use pixel independent functions like setFontSize or setFontChars . Setting font size changes all text in console. Parameters int - width of font in pixels int - height of font in pixels Return value Return type is bool . Return value is true if font was set successfully, false if any error occurs. Example This example sets the font to Window.setSizeChars(100, 50); Cursor.setFontChars(50, 50); std::cout << \"XOX\\nOXO\\nXOX\" << std::endl; bool setFontType(const std::string name) This function sets the font in console. The most common fonts are Consolas , Courier , Lucida Console , MS Gothic , Terminal . Setting font changes all text in console. Parameters string - name of font Return value Return type is bool . Return value is true if font was set successfully, false if any error occurs. Example This example sets the font to Lucida Console and then changes the font size. Cursor.setFontType(\"Lucida Console\"); Cursor.setFontSize(28); bool printChar(int x, int y, int character, Color color=CURRENT) This function prints one character on specified position. Additionally it can change a cursor color. To print a blank character you can use printBlank . To print more characters, use a setPosition and standard output. Parameters int - position in columns int - position in rows int - any character or Constant . Color - (optional) any Color constant, default is CURRENT Return value Return type is bool . Return value is true if everything works, false if any error occurs. If coordinates are outside screen it prints nothing and returns true . Example This is example writes a horizontal symbol on specified position. Then it writes W letter if W key was pressed and hides it after release. Cursor.printChar(3, 2, DLINE_V, LIGHTBLUE); if (Keyboard.getPressed('W')) { Cursor.printChar(11, 5, 'W'); } if (Keyboard.getReleased('W')) { Cursor.printBlank(11, 5); } bool printBlank(int x, int y) This function prints blank character on specified position. To print a other characters you can use printChar . To print more characters, use a setPosition and standard output. Parameters int - position in columns int - position in rows Return value Return type is bool . Return value is true if everything works, false if any error occurs. If coordinates are outside screen it prints nothing and returns true . Example This is example creates a simple animation of X moving to right of the screen. for (int i = 1; i <= 16; i++) { Cursor.printChar(i, 0, 'X', LIGHTGREEN); Cursor.printBlank(i-1, 0); Keyboard.wait(30); } bool clearScreen() This function fills entire console with blank characters. To hide only few characters you should use printBlank . This function is a replacement for overused system(\"cls\") . It is a more clean way to clear window. Parameters This function doesn't have any parameters. Return value Return type is bool . Return value is true if everything works, false if any error occurs. Example This is example writes some text and then waits for user. After user presses a button, it clears the window. std::cout << \"Welcome in this awesome application, please enjoy your stay.\"; Keyboard.waitUser(); Cursor.clearScreen(); std::cout << \"Let's go over some basic controls, shall we?\";","title":"Cursor"},{"location":"wiki/cursor/#cursor","text":"Cursor writes in console window all text. You can change its position, color and font. Table of Set functions bool setPosition(int x, int y) bool setColor(Color foreground, Color background=CURRENT) bool setFontSize(int size) bool setFontChars(int columns, int rows) bool setFontPixels(int width, int height) bool setFontType(std::string name) Table of Printing functions bool printChar(int x, int y, int character, Color color=CURRENT) bool printBlank(int x, int y) bool clearScreen() Table of Get functions int getX() int getY() int getColorForeground() int getColorBackground() int getFontWidth() int getFontHeight() std::string getFontType()","title":"Cursor"},{"location":"wiki/cursor/#information","text":"","title":"Information"},{"location":"wiki/cursor/#position","text":"The cursor position indicates where text is going to be written. It is used every time you write a text. It is changed automatically but setting it manually provides a useful custom functionality. The unit of position is a single character . You set position of cursor by calling a function with specified number of columns and rows . The top left corner of the window is marked as [0,0] or more precisely columns = 0 and rows = 0 . The opposite bottom right corner is obtained using Window functions. The character count of the window tells you many characters you can write in the current console without. Characters are not screen pixels . The actual character size in pixels depends on many factors including screen size and font size . The default value is about 16\u00d724 pixels large. Check out font for more information.","title":"Position"},{"location":"wiki/cursor/#color","text":"Cursor color can be used to highlight different texts and to make simple graphics. There are 16 different colors to choose from. They are defined in as an integer enumeration called Color . This means you use Color constants only by their name without using object notation. Color Constant HEX value Color Constant HEX value BLACK #0c0c0c GRAY #767676 BLUE #0037da LIGHTBLUE #3b78ff GREEN #13a10e LIGHTGREEN #16c60c CYAN #3a96dd LIGHTCYAN #61d6d6 RED #c50f1f LIGHTRED #e74856 MAGENTA #881798 LIGHTMAGENTA #b4009e YELLOW #c19c00 LIGHTYELLOW #f9f1a5 LIGHTGRAY #cccccc WHITE #f2f2f2 CURRENT is a special type of color. It is the color which is at the moment in use.","title":"Color"},{"location":"wiki/cursor/#font","text":"Font includes font size and font type. You can't have in one application characters of different sizes and fonts. Setting font changes all text in console therefore should be called at the start of the application. A good practice is to change a font only at the start of an application. Font size is measured by size of one character. When setting a new font size you should be using a setFontSize() or setFontChars() . These functions change font size in respect of the console window size. It makes porting application to different screen size much more easier. For headers and large texts you can use a ASCII Text generator. When printing any ascii art, do not forget to add escape characters. Change all \\ to \\\\ . using namespace std; // use standard library for output cout << \" _____ _____ _____ _______ _________ _____ \" << endl; cout << \" /\\\\ / ____|_ _|_ _| / ____\\\\ \\\\ / /__ __|_ _| \" << endl; cout << \" / \\\\ | | | | | | | (___ \\\\ \\\\ /\\\\ / / | | | | \" << endl; cout << \" / /\\\\ \\\\| | | | | | \\\\___ \\\\ \\\\ \\\\/ \\\\/ / | | | |\" << endl; cout << \" / ____ \\\\ |____ _| |_ _| |_ ____) | \\\\ /\\\\ / | | _| |_ \" << endl; cout << \"/_/ \\\\_\\\\_____|_____|_____| |_____/ \\\\/ \\\\/ |_| |_____| \" << endl; Font type is style of characters. Different font families exists and you can choose whichever you prefer. You can use only one type of font in console. Windows console supports many monospace fonts with most usable being Consolas , Courier , Lucida Console , MS Gothic , Terminal . You can also try some proportional fonts like Arial , Times New Roman , Tahoma , Impact , Modern , Roman , Symbol , Segoe UI . However some of these are a little bit glitchy and should be used with caution. These are not all the fonts types and you can try other names.","title":"Font"},{"location":"wiki/cursor/#constants","text":"The new versions of windows console stopped supporting ascii characters. You can use UTF instead . You can also use following constants in your code. These are the only few characters that will work in both new and old console. Instead of writing Cursor.printChar(197) you can use Cursor.printChar(LINE_HV) . Char Constant Description Char Constant Description \u2500 LINE_H horizontal \u2550 DLINE_H horizontal \u2502 LINE_V vertical \u2551 DLINE_V vertical \u2510 LINE_UR up right \u2557 DLINE_UR up right \u250c LINE_UL up left \u2554 DLINE_UL up left \u2518 LINE_DR down right \u255d DLINE_DR down right \u2514 LINE_DL down left \u255a DLINE_DL down left \u2534 LINE_HU horizontal up \u2569 DLINE_HU horizon \u252c LINE_HD horizontal down \u2566 DLINE_HD horizontal down \u251c LINE_VR vertical right \u2560 DLINE_VR vertical right \u2524 LINE_VL vertical left \u2563 DLINE_VL vertical left \u253c LINE_HV crossed lines \u256c DLINE_HV crossed lines FILL_B blank \u00ab SHIFT_L left bracket \u2591 FILL_L low dotted \u00bb SHIFT_R right bracket \u2592 FILL_M medium dotted \u2584 SQUARE_D square down \u2593 FILL_H high dotted \u2580 SQUARE_U square up \u2588 FILL_F full \u25a0 SQUARE_M square middle","title":"Constants"},{"location":"wiki/cursor/#examples","text":"Following example writes colorful Hello world on screen on specified position. Cursor.setPosition(5,2); Cursor.setColor(YELLOW); std::cout << \"Hello world!\" << std::endl; These are examples where you can use colors. Cursor.setColor(MAGENTA, LIGHTCYAN); Cursor.printChar(12, 3, 'D', GREEN); Cursor.printChar(12, 3, FILL_F, GREEN); Window.setColor(BLACK, WHITE); These are examples where you can use font. Cursor.setFontSize(22); Cursor.setFontType(\"Lucida Console\"); std::cout << \"Printing some text\";","title":"Examples"},{"location":"wiki/cursor/#functions","text":"","title":"Functions"},{"location":"wiki/cursor/#bool-setpositionint-x-int-y","text":"This function sets the position of cursor. When you call any standard function to print a text, first character will be on the set position. Next characters will continue right and down. The cursor position will not change if given position is outside the console window. Parameters int x - position in columns int y - position in rows Return value Return type is bool . Return value is true if position was set successfully or position is outside the console window. Return value is false if unexpected error occurs. Example This example sets the cursor position to coordinates [12, 8] and writes there using C++ standard output, printf and putchar. Cursor.setPosition(12, 8); std::cout << \"Hello \"; printf(\"world\"); putchar('!');","title":"bool setPosition(int x, int y)"},{"location":"wiki/cursor/#bool-setcolorcolor-foreground-color-backgroundcurrent","text":"This function sets the color of cursor. It changes the foreground color of the printed characters and optionally you can also specify a background color. This function doesn't change already written characters (you can use Window.setColor for that). Parameters Color - any Color constant, foreground text color Color - (optional) any Color , default is CURRENT, background text color Return value Return type is bool . Return value is true if color was set successfully, false if any error occurs. Example This example writes two texts on the screen. First is a yellow text without specific background color, second is magenta text with light cyan background. Cursor.setColor(YELLOW); std::cout << \"Yellow text without background color\"; Cursor.setColor(MAGENTA, LIGHTCYAN); std::cout << \"Magenta text on light cyan background\";","title":"bool setColor(Color foreground, Color background=CURRENT)"},{"location":"wiki/cursor/#bool-setfontsizeint-size","text":"This function sets the height of characters in console. It calculates size proportionally to current screen size. It is the most convenient and easy way to set the font size. Setting font size changes all text in console. Parameters int - new character height. Size 15 is approximately 1/50 of the console height. Return value Return type is bool . Return value is true if font was set successfully, false if any error occurs. Example This example writes a text on screen with size of 28. Then it waits for user input. After user presses a key, it resizes the console size and adjusts the font size to new console size. Cursor.setFontSize(28); std::cout << \"Press a key to change the screen size...\" << std::endl; Keyboard.waitUser(); Window.setSizePixels(1280,720); Cursor.setFontSize(28);","title":"bool setFontSize(int size)"},{"location":"wiki/cursor/#bool-setfontcharsint-columns-int-rows","text":"This function sets the font size in console. It calculates size proportionally to a given screen columns and rows. Setting font size changes all text in console. Parameters int - at most how many columns will font occupy int - at most how many rows will font occupy Return value Return type is bool . Return value is true if font was set successfully, false if any error occurs. Example This example sets the font to squares and writes a filled tic tac toe board. Window.setSizeChars(100, 50); Cursor.setFontChars(50, 50); std::cout << \"XOX\\nOXO\\nXOX\" << std::endl;","title":"bool setFontChars(int columns, int rows)"},{"location":"wiki/cursor/#bool-setfontpixelsint-width-int-height","text":"This function sets the font size in console. It sets the font equal to pixels. The result of this function depends heavily on console screen size in pixels. You probably should use pixel independent functions like setFontSize or setFontChars . Setting font size changes all text in console. Parameters int - width of font in pixels int - height of font in pixels Return value Return type is bool . Return value is true if font was set successfully, false if any error occurs. Example This example sets the font to Window.setSizeChars(100, 50); Cursor.setFontChars(50, 50); std::cout << \"XOX\\nOXO\\nXOX\" << std::endl;","title":"bool setFontPixels(int width, int height)"},{"location":"wiki/cursor/#bool-setfonttypeconst-stdstring-name","text":"This function sets the font in console. The most common fonts are Consolas , Courier , Lucida Console , MS Gothic , Terminal . Setting font changes all text in console. Parameters string - name of font Return value Return type is bool . Return value is true if font was set successfully, false if any error occurs. Example This example sets the font to Lucida Console and then changes the font size. Cursor.setFontType(\"Lucida Console\"); Cursor.setFontSize(28);","title":"bool setFontType(const std::string name)"},{"location":"wiki/cursor/#bool-printcharint-x-int-y-int-character-color-colorcurrent","text":"This function prints one character on specified position. Additionally it can change a cursor color. To print a blank character you can use printBlank . To print more characters, use a setPosition and standard output. Parameters int - position in columns int - position in rows int - any character or Constant . Color - (optional) any Color constant, default is CURRENT Return value Return type is bool . Return value is true if everything works, false if any error occurs. If coordinates are outside screen it prints nothing and returns true . Example This is example writes a horizontal symbol on specified position. Then it writes W letter if W key was pressed and hides it after release. Cursor.printChar(3, 2, DLINE_V, LIGHTBLUE); if (Keyboard.getPressed('W')) { Cursor.printChar(11, 5, 'W'); } if (Keyboard.getReleased('W')) { Cursor.printBlank(11, 5); }","title":"bool printChar(int x, int y, int character, Color color=CURRENT)"},{"location":"wiki/cursor/#bool-printblankint-x-int-y","text":"This function prints blank character on specified position. To print a other characters you can use printChar . To print more characters, use a setPosition and standard output. Parameters int - position in columns int - position in rows Return value Return type is bool . Return value is true if everything works, false if any error occurs. If coordinates are outside screen it prints nothing and returns true . Example This is example creates a simple animation of X moving to right of the screen. for (int i = 1; i <= 16; i++) { Cursor.printChar(i, 0, 'X', LIGHTGREEN); Cursor.printBlank(i-1, 0); Keyboard.wait(30); }","title":"bool printBlank(int x, int y)"},{"location":"wiki/cursor/#bool-clearscreen","text":"This function fills entire console with blank characters. To hide only few characters you should use printBlank . This function is a replacement for overused system(\"cls\") . It is a more clean way to clear window. Parameters This function doesn't have any parameters. Return value Return type is bool . Return value is true if everything works, false if any error occurs. Example This is example writes some text and then waits for user. After user presses a button, it clears the window. std::cout << \"Welcome in this awesome application, please enjoy your stay.\"; Keyboard.waitUser(); Cursor.clearScreen(); std::cout << \"Let's go over some basic controls, shall we?\";","title":"bool clearScreen()"},{"location":"wiki/keyboard/","text":"Keyboard Keyboard is used for getting input from user. It connects to keyboard and mouse keys. Keyboard has also some functions to slow the program in order to make it more user friendly. Table of Functions bool Keyboard.get(int key) bool Keyboard.getPressed(int key) bool Keyboard.getReleased(int key) bool Keyboard.wait(int ticks) bool Keyboard.waitUser() Information Keyboard keys are integer constants. You can use them as characters 'C' or use virtual keys . Virtual keys are used without quotations e. g. VK_RETURN . They are defined in windows.h and can be found at microsoft docs . The following table summarizes most common virtual keys. Virtual Key Description VK_UP Up arrow key VK_LEFT Left arrow key VK_RIGHT Right arrow key VK_DOWN Down arrow key VK_SPACE Spacebar VK_RETURN Enter key VK_SHIFT Shift key VK_CONTROL Control key VK_MENU Alt key VK_CAPITAL Caps lock key VK_ESCAPE Escape key VK_LBUTTON Left mouse button VK_RBUTTON Right mouse button VK_MBUTTON Middle mouse button Following examples show basic usage of the keyboard object. if (Keyboard.getPressed(VK_UP)) // UP arrow was pressed while (Keyboard.get('A')) // While 'A' key is down if (Keyboard.getReleased('1')) // '1' key is released Functions bool Keyboard.get(int key) This function tests if a keyboard key is currently down. It outputs true as long as the key is down. You can use a Keyboard.wait() to slow down a while statement. Parameters int - any virtual key or character. Return value Return type is bool . Return value is true , when key is currently down. Otherwise is false . Example First example gets current input of 'W' key. The second example is while loop that loops until the spacebar is pressed. if (Keyboard.get('W')) { ... } while (!Keyboard.get(VK_SPACE)) { ... } bool Keyboard.getPressed(int key) This function checks if a key was pressed since the last call. Keyboard getPressed outputs true only once when key is pressed. Afterwards output becomes false regardless of the key is down or not. To check current state of the keyboard use Keyboard.get() instead. Parameters int - any virtual key or character. Return value Return type is bool . Return value is true , when the key is currently down. Otherwise is false . Example This function is useful when detecting single click on the mouse. Following code checks when mouse left button is pressed and then it prints a red 'X' on the mouse position using a Cursor.printChar() . Checkout also Mouse.getColumns() and Mouse.getRows() for more information. while(!Keyboard.get(VK_ESCAPE)) { if (Keyboard.getPressed(VK_LBUTTON)) { int mx = Mouse.getColumns(); int my = Mouse.getRows(); Cursor.printChar(mx,my,'X',LIGHTRED); } } bool Keyboard.getReleased(int key) This function checks if a key was released since the last call. Keyboard getReleased outputs true only once when key is released. Afterwards output becomes false regardless of the key is up or not. To check current state of the keyboard use Keyboard.get() instead. Parameters int - any virtual key or character. Return value Return type is bool . Return value is true , when the key is currently down. Otherwise is false . Example This function can be used when clicking on menu buttons. Only when a key button is released the desired action will be executed. User can change their mind in the last moment. In the following example a code checks if an ENTER key was pressed. Then it Cursor.clearScreen() and based on a custom integer variable position chooses which action to take. if (Keyboard.getReleased(VK_RETURN)) { Cursor.clearScreen(); switch(position) { case 1: std::cout<<\"Starting a new project\"; break; case 2: std::cout<<\"Loading a saved project\"; break; } } bool Keyboard.wait(unsigned int ticks) This function slow downs program to specific number of ticks per second . If you want to stop the program until user presses a key use Keyboard.waitUser() instated. This function should be used in while statements to slow down their fast repeats. Furthermore, this function should be the last function in the while statement. Parameters unsigned int - ticks per second program should have. Passing a 0 doesn't stop program and negative numbers are converted to their positive counterparts. Unsigned int is integer without the plus or minus sign, therefore passing a negative number is the same as passing the same positive number. Return value Return type is bool . The output is true when ticks are not zero. Example It can be used in games to slow down movement of player on the screen. It can also be used in menus to slow down fast scrolling using keyboard keys. This example can be used in a game to move an player 30 times per second. while(!Keyboard.get(VK_ESCAPE)) { if (keyboard.get(VK_LEFT)) { x--; } if (keyboard.get(VK_RIGHT)) { x++; } if (keyboard.get(VK_UP)) { y--; } if (keyboard.get(VK_DOWN)) { y++; } Keyboard.wait(30); } bool Keyboard.waitUser() This function stops the application until user presses any button. Releasing a button doesn't trigger this function. If you want to slow downs program to specific number of ticks per second use Keyboard.wait() instead. This function is used to stop a program from continuing until a user presses a button. Parameters This function doesn't have any parameters. Return value Return type is bool . The output is true if all the functions were executed correctly. When error occurs return value is false . Example Following example writes information on screen and waits until user presses any button. After pressing a button the function Cursor.clearScreen() is used. std::cout << \"That's all from the keyboard object!\" << std::endl; std::cout << \"Press any key to continue...\" << std::endl; Keyboard.waitUser(); Cursor.clearScreen();","title":"Keyboard"},{"location":"wiki/keyboard/#keyboard","text":"Keyboard is used for getting input from user. It connects to keyboard and mouse keys. Keyboard has also some functions to slow the program in order to make it more user friendly. Table of Functions bool Keyboard.get(int key) bool Keyboard.getPressed(int key) bool Keyboard.getReleased(int key) bool Keyboard.wait(int ticks) bool Keyboard.waitUser()","title":"Keyboard"},{"location":"wiki/keyboard/#information","text":"Keyboard keys are integer constants. You can use them as characters 'C' or use virtual keys . Virtual keys are used without quotations e. g. VK_RETURN . They are defined in windows.h and can be found at microsoft docs . The following table summarizes most common virtual keys. Virtual Key Description VK_UP Up arrow key VK_LEFT Left arrow key VK_RIGHT Right arrow key VK_DOWN Down arrow key VK_SPACE Spacebar VK_RETURN Enter key VK_SHIFT Shift key VK_CONTROL Control key VK_MENU Alt key VK_CAPITAL Caps lock key VK_ESCAPE Escape key VK_LBUTTON Left mouse button VK_RBUTTON Right mouse button VK_MBUTTON Middle mouse button Following examples show basic usage of the keyboard object. if (Keyboard.getPressed(VK_UP)) // UP arrow was pressed while (Keyboard.get('A')) // While 'A' key is down if (Keyboard.getReleased('1')) // '1' key is released","title":"Information"},{"location":"wiki/keyboard/#functions","text":"","title":"Functions"},{"location":"wiki/keyboard/#bool-keyboardgetint-key","text":"This function tests if a keyboard key is currently down. It outputs true as long as the key is down. You can use a Keyboard.wait() to slow down a while statement. Parameters int - any virtual key or character. Return value Return type is bool . Return value is true , when key is currently down. Otherwise is false . Example First example gets current input of 'W' key. The second example is while loop that loops until the spacebar is pressed. if (Keyboard.get('W')) { ... } while (!Keyboard.get(VK_SPACE)) { ... }","title":"bool Keyboard.get(int key)"},{"location":"wiki/keyboard/#bool-keyboardgetpressedint-key","text":"This function checks if a key was pressed since the last call. Keyboard getPressed outputs true only once when key is pressed. Afterwards output becomes false regardless of the key is down or not. To check current state of the keyboard use Keyboard.get() instead. Parameters int - any virtual key or character. Return value Return type is bool . Return value is true , when the key is currently down. Otherwise is false . Example This function is useful when detecting single click on the mouse. Following code checks when mouse left button is pressed and then it prints a red 'X' on the mouse position using a Cursor.printChar() . Checkout also Mouse.getColumns() and Mouse.getRows() for more information. while(!Keyboard.get(VK_ESCAPE)) { if (Keyboard.getPressed(VK_LBUTTON)) { int mx = Mouse.getColumns(); int my = Mouse.getRows(); Cursor.printChar(mx,my,'X',LIGHTRED); } }","title":"bool Keyboard.getPressed(int key)"},{"location":"wiki/keyboard/#bool-keyboardgetreleasedint-key","text":"This function checks if a key was released since the last call. Keyboard getReleased outputs true only once when key is released. Afterwards output becomes false regardless of the key is up or not. To check current state of the keyboard use Keyboard.get() instead. Parameters int - any virtual key or character. Return value Return type is bool . Return value is true , when the key is currently down. Otherwise is false . Example This function can be used when clicking on menu buttons. Only when a key button is released the desired action will be executed. User can change their mind in the last moment. In the following example a code checks if an ENTER key was pressed. Then it Cursor.clearScreen() and based on a custom integer variable position chooses which action to take. if (Keyboard.getReleased(VK_RETURN)) { Cursor.clearScreen(); switch(position) { case 1: std::cout<<\"Starting a new project\"; break; case 2: std::cout<<\"Loading a saved project\"; break; } }","title":"bool Keyboard.getReleased(int key)"},{"location":"wiki/keyboard/#bool-keyboardwaitunsigned-int-ticks","text":"This function slow downs program to specific number of ticks per second . If you want to stop the program until user presses a key use Keyboard.waitUser() instated. This function should be used in while statements to slow down their fast repeats. Furthermore, this function should be the last function in the while statement. Parameters unsigned int - ticks per second program should have. Passing a 0 doesn't stop program and negative numbers are converted to their positive counterparts. Unsigned int is integer without the plus or minus sign, therefore passing a negative number is the same as passing the same positive number. Return value Return type is bool . The output is true when ticks are not zero. Example It can be used in games to slow down movement of player on the screen. It can also be used in menus to slow down fast scrolling using keyboard keys. This example can be used in a game to move an player 30 times per second. while(!Keyboard.get(VK_ESCAPE)) { if (keyboard.get(VK_LEFT)) { x--; } if (keyboard.get(VK_RIGHT)) { x++; } if (keyboard.get(VK_UP)) { y--; } if (keyboard.get(VK_DOWN)) { y++; } Keyboard.wait(30); }","title":"bool Keyboard.wait(unsigned int ticks)"},{"location":"wiki/keyboard/#bool-keyboardwaituser","text":"This function stops the application until user presses any button. Releasing a button doesn't trigger this function. If you want to slow downs program to specific number of ticks per second use Keyboard.wait() instead. This function is used to stop a program from continuing until a user presses a button. Parameters This function doesn't have any parameters. Return value Return type is bool . The output is true if all the functions were executed correctly. When error occurs return value is false . Example Following example writes information on screen and waits until user presses any button. After pressing a button the function Cursor.clearScreen() is used. std::cout << \"That's all from the keyboard object!\" << std::endl; std::cout << \"Press any key to continue...\" << std::endl; Keyboard.waitUser(); Cursor.clearScreen();","title":"bool Keyboard.waitUser()"},{"location":"wiki/mouse/","text":"Mouse Mouse object is used to get position of mouse in screen. Table of Functions bool Mouse.getX() bool Mouse.getX() bool Mouse.getColumns() bool Mouse.getRows() Information Mouse object is used only to detect position of mouse. To detect a mouse keys use keyboard object and virtual keys VK_LBUTTON , VK_RBUTTON and VK_MBUTTON . Mouse can be used as following example. int mx = Mouse.getColumns(); int my = Mouse.getRows(); if (Keyboard.get(VK_LBUTTON)) Cursor.printChar(mx, my, 'M'); Functions int Mouse.getX() This function returns the position of mouse in console window. The position is in pixels. Instead of this function you should use getColumns . To position in pixels can change depending on screen size and font size therefore it is not a good solution when porting your game. Parameters This function doesn't have any parameters. Return value Return type is int . It is pixel position relative to console window. Function returns negatives, if mouse is outside the console window on the left. The function can also return larger numbers than the screen width if the mouse is outside the console window on the right. Example This example gets current input of 'W' key. The second example is while loop that loops until the spacebar is pressed. if (Keyboard.get('W')) { ... } while (!Keyboard.get(VK_SPACE)) { ... }","title":"Mouse"},{"location":"wiki/mouse/#mouse","text":"Mouse object is used to get position of mouse in screen. Table of Functions bool Mouse.getX() bool Mouse.getX() bool Mouse.getColumns() bool Mouse.getRows()","title":"Mouse"},{"location":"wiki/mouse/#information","text":"Mouse object is used only to detect position of mouse. To detect a mouse keys use keyboard object and virtual keys VK_LBUTTON , VK_RBUTTON and VK_MBUTTON . Mouse can be used as following example. int mx = Mouse.getColumns(); int my = Mouse.getRows(); if (Keyboard.get(VK_LBUTTON)) Cursor.printChar(mx, my, 'M');","title":"Information"},{"location":"wiki/mouse/#functions","text":"","title":"Functions"},{"location":"wiki/mouse/#int-mousegetx","text":"This function returns the position of mouse in console window. The position is in pixels. Instead of this function you should use getColumns . To position in pixels can change depending on screen size and font size therefore it is not a good solution when porting your game. Parameters This function doesn't have any parameters. Return value Return type is int . It is pixel position relative to console window. Function returns negatives, if mouse is outside the console window on the left. The function can also return larger numbers than the screen width if the mouse is outside the console window on the right. Example This example gets current input of 'W' key. The second example is while loop that loops until the spacebar is pressed. if (Keyboard.get('W')) { ... } while (!Keyboard.get(VK_SPACE)) { ... }","title":"int Mouse.getX()"},{"location":"wiki/window/","text":"Window Window object is used to get and set console window size and its properties. Table of Set functions bool setSizeChars(int columns, int rows) bool setSizePixels(int width, int height) bool setPositionPixels(int x, int y) bool setFullscreenWindow() bool setFullscreenBorderless() bool setColor(Color foreground, Color background) bbool setTitle(std::string title) Table of Printing functions bool showBlinking() bool showSelection() bool showScrollbars(int columns, int rows) bool hideBlinking() bool hideSelection() bool hideScrollbars() Table of Get functions int getX() int getY() int getWidth() int getHeight() int getRows() int getBarHeight() int getScreenWidth() int getScreenHeight() Information First we have to understand the difference between console window or simply console and screen. Console is an application used to run commands and executable files. Screen is the full size of working area on monitor. The position and size of console window can be changed by user or by code itself. You can use functions below to get and set these properties exactly. The console window and screen size can be different for each user. To publish an application you have to count for different screen sizes. The easiest solution is to use Window.setFullscreenBorderless() and Cursor.setFontChars . The first function sets the console size to match the screen size and the second function adjusts cursor font to a given number of characters in columns and rows. Window can be used as following example. Window.setFullscreenBorderless(); middle = Window.getColumns()/2; center = Window.getRows()/2;","title":"Window"},{"location":"wiki/window/#window","text":"Window object is used to get and set console window size and its properties. Table of Set functions bool setSizeChars(int columns, int rows) bool setSizePixels(int width, int height) bool setPositionPixels(int x, int y) bool setFullscreenWindow() bool setFullscreenBorderless() bool setColor(Color foreground, Color background) bbool setTitle(std::string title) Table of Printing functions bool showBlinking() bool showSelection() bool showScrollbars(int columns, int rows) bool hideBlinking() bool hideSelection() bool hideScrollbars() Table of Get functions int getX() int getY() int getWidth() int getHeight() int getRows() int getBarHeight() int getScreenWidth() int getScreenHeight()","title":"Window"},{"location":"wiki/window/#information","text":"First we have to understand the difference between console window or simply console and screen. Console is an application used to run commands and executable files. Screen is the full size of working area on monitor. The position and size of console window can be changed by user or by code itself. You can use functions below to get and set these properties exactly. The console window and screen size can be different for each user. To publish an application you have to count for different screen sizes. The easiest solution is to use Window.setFullscreenBorderless() and Cursor.setFontChars . The first function sets the console size to match the screen size and the second function adjusts cursor font to a given number of characters in columns and rows. Window can be used as following example. Window.setFullscreenBorderless(); middle = Window.getColumns()/2; center = Window.getRows()/2;","title":"Information"}]}