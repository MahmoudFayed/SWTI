{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SWTI Docs The SWTI library is made out of 4 static objects. Cursor which is used for printing colorful text on screen Keyboard which is used for detecting user keyboard input Mouse which is used for detecting user mouse input Window which is used for resizing window These four objects have in total about 40 methods to with console. Instalation The installation of SWTI library is easy. Download this repository and copy the folder SWTI/swti to your project folder. It contains header and source code for the library. In your application, include a header \"#include swti/swti.hpp\" . Visual Studio - you will need to add header and source files to your project. Right click on the right folder header files and add existing file and choose SWTI/swti.h . Do the same for source files and add SWTI/swti.cpp . Code Blocks - click the left pane folders and add existing header and source files to your project. G++ Console - You can then use following two commands g++ -c main.cpp swti/swti.cpp and g++ -o main.exe main.o swti.o to compile your project. Change main.cpp and main.exe to whatever you prefer. Hello world You can use this simple example to ensure that SWTI library is installed correctly. Following code writes colorful Hello world on a specified position. It uses the Cursor object and methods setColor and setPosition. #include <iostream> #include \"swti/swti.hpp\" int main() { Cursor.setColor(YELLOW); Cursor.setPosition(5,2); std::cout << \"Hello world!\" << std::endl; } Troubleshooting If something doesn't work don't panic. Try to create a new project without any additional libraries other than SWTI. If you succeed, problem is probably collision function names in the library. Basically two functions or objects have similar name and thus cannot be resolved. You can create a namespace which is collection of functions named swti. Inside this namespace include swti header and also the source file. #include <iostream> namespace swti { #include \"swti/swti.hpp\" #include \"swti/swti.cpp\" // source is needed } int main() { swti::Color color = swti::LIGHTGREEN; swti::Cursor.setColor(color); std::cout << \"SWTI Works!\\n\"; } You have to use the swti::xxx notation before you use any of the swti functions or objects. Now everything should work and if not please share your problem in issues .","title":"Home"},{"location":"#welcome-to-swti-docs","text":"The SWTI library is made out of 4 static objects. Cursor which is used for printing colorful text on screen Keyboard which is used for detecting user keyboard input Mouse which is used for detecting user mouse input Window which is used for resizing window These four objects have in total about 40 methods to with console.","title":"Welcome to SWTI Docs"},{"location":"#instalation","text":"The installation of SWTI library is easy. Download this repository and copy the folder SWTI/swti to your project folder. It contains header and source code for the library. In your application, include a header \"#include swti/swti.hpp\" . Visual Studio - you will need to add header and source files to your project. Right click on the right folder header files and add existing file and choose SWTI/swti.h . Do the same for source files and add SWTI/swti.cpp . Code Blocks - click the left pane folders and add existing header and source files to your project. G++ Console - You can then use following two commands g++ -c main.cpp swti/swti.cpp and g++ -o main.exe main.o swti.o to compile your project. Change main.cpp and main.exe to whatever you prefer.","title":"Instalation"},{"location":"#hello-world","text":"You can use this simple example to ensure that SWTI library is installed correctly. Following code writes colorful Hello world on a specified position. It uses the Cursor object and methods setColor and setPosition. #include <iostream> #include \"swti/swti.hpp\" int main() { Cursor.setColor(YELLOW); Cursor.setPosition(5,2); std::cout << \"Hello world!\" << std::endl; }","title":"Hello world"},{"location":"#troubleshooting","text":"If something doesn't work don't panic. Try to create a new project without any additional libraries other than SWTI. If you succeed, problem is probably collision function names in the library. Basically two functions or objects have similar name and thus cannot be resolved. You can create a namespace which is collection of functions named swti. Inside this namespace include swti header and also the source file. #include <iostream> namespace swti { #include \"swti/swti.hpp\" #include \"swti/swti.cpp\" // source is needed } int main() { swti::Color color = swti::LIGHTGREEN; swti::Cursor.setColor(color); std::cout << \"SWTI Works!\\n\"; } You have to use the swti::xxx notation before you use any of the swti functions or objects. Now everything should work and if not please share your problem in issues .","title":"Troubleshooting"},{"location":"about/","text":"About Contributing You can improve the library by contributing to it. If you find a bug, please write it in issues . You can also write a code for a new useful function and add a merge request . Keep in mind the function has to be usable in any applications or game. By excluding too specific functions makes library simple to learn and easy to use. Credits This library is currently maintained by one person. Feel free to contribute . License The library is licensed under MIT License . You can use the code in any application, but without warranty. That means you can make any application with the library but I am not responsible for any crashes and further problems.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#contributing","text":"You can improve the library by contributing to it. If you find a bug, please write it in issues . You can also write a code for a new useful function and add a merge request . Keep in mind the function has to be usable in any applications or game. By excluding too specific functions makes library simple to learn and easy to use.","title":"Contributing"},{"location":"about/#credits","text":"This library is currently maintained by one person. Feel free to contribute .","title":"Credits"},{"location":"about/#license","text":"The library is licensed under MIT License . You can use the code in any application, but without warranty. That means you can make any application with the library but I am not responsible for any crashes and further problems.","title":"License"},{"location":"examples/app/","text":"Windows app","title":"Window app"},{"location":"examples/app/#windows-app","text":"","title":"Windows app"},{"location":"examples/chess/","text":"Chess game","title":"Chess game"},{"location":"examples/chess/#chess-game","text":"","title":"Chess game"},{"location":"examples/start/","text":"Start example You can use folowing code to ensure that all the objects are working. This code writes on screen a yellow text and when a colors it when mouse hovers over it. #include <iostream> #include \"swti/swti.h\" int main() { Window.hideBlinking(); Window.hideSelection(); while(!Keyboard.get(VK_ESCAPE)) { if (Mouse.getRows() == 2) Cursor.setColor(LIGHTGREEN); else Cursor.setColor(YELLOW); Cursor.setPosition(5,2); std::cout << \"Start the application\"; Keyboard.wait(30); } }","title":"Begginer app"},{"location":"examples/start/#start-example","text":"You can use folowing code to ensure that all the objects are working. This code writes on screen a yellow text and when a colors it when mouse hovers over it. #include <iostream> #include \"swti/swti.h\" int main() { Window.hideBlinking(); Window.hideSelection(); while(!Keyboard.get(VK_ESCAPE)) { if (Mouse.getRows() == 2) Cursor.setColor(LIGHTGREEN); else Cursor.setColor(YELLOW); Cursor.setPosition(5,2); std::cout << \"Start the application\"; Keyboard.wait(30); } }","title":"Start example"},{"location":"wiki/constants/","text":"Cursor symbols The cursor symbols replace some of the most used ascii ordinals with constants. You can use this list instead of writing a ordinal ascii number. The common keyboard symbols are omitted, they can be used as characters in single quotation marks 'A' or '#' . Some special symbols are not included, for example letters from national alphabet \u00e6 and other symbols like ordinal indicator \u00aa . If you don't find your favorite ASCII symbol , add in your code a new integer constant and set it to standard ASCII code number. Take me back to cursor . General constants Char Constant Description Char Constant Description \u263a SMILE smile \u25b2 TRIANGLE_U up triangle \u263b SMILEY smile \u25bc TRIANGLE_D down triangle \u2665 CARD_H hearts \u25ba TRIANGLE_R right triangle \u2666 CARD_D diamonds \u25c4 TRIANGLE_L left triangle \u2663 CARD_C clubs \u2191 ARROW_U up arrow \u2660 CARD_S spades \u2193 ARROW_D down arrow \u2022 BULLET bullet \u2192 ARROW_R right arrow \u25d8 HOLE bullet hole \u2190 ARROW_L left arrow \u25cb CIRCLE circle \u2195 ARROW_UD up and down arrow \u25d9 CHOLE circle hole \u2194 ARROW_LR left and right arrow \u263c SUN two notes \u21a8 ARROW_EN end arrow \u2642 MALE male \u25ac RECTANGLE rectangle \u2640 FEMALE female \u00a7 SECTION section sign \u266a NOTE single note \u00b6 PARAGRAPH paragraph sign \u266b MUSIC two notes \u203c IMPORTANT exclamation marks Mathematical symbols Char Constant Description Char Constant Description + MATH_PL plus sign @ SGN_AT at sign - MATH_MI minus sign \u00ae SGN_TR trademark \u00d7 MATH_ML multiplication \u00a9 SGN_CPY copyright \u00f7 MATH_DI division $ CURR_D dollar sign \u00b1 MATH_PM plus minus \u00a5 CURR_Y yen sign \u00ac MATH_NT negation \u00a3 CURR_P pound sign \u00ad\u2261 MATH_TB triple bar \u00a2 CURR_C cent sign \u0192 MATH_FN function \u00a4 CURR_A any currency \u00b0 MATH_DG degree ~ TILDE tilde \u00f8 MATH_ES empty set \u00af UPPER upperscore \u00d8 MATH_ZR slashed zero _ UNDER underscore / SLASH fraction slash \u2017 DUNDER double unders \\ BSLASH backslash \u00ab LQUOTE quotation left \u2302 HOME home button \u00bb RQUOTE quotation right Box drawing characters Char Constant Description Char Constant Description \u2500 LINE_H horizontal \u2550 DLINE_H horizontal \u2502 LINE_V vertical \u2551 DLINE_V vertical \u2510 LINE_UR up right \u2557 DLINE_UR up right \u250c LINE_UL up left \u2554 DLINE_UL up left \u2518 LINE_DR down right \u255d DLINE_DR down right \u2514 LINE_DL down left \u255a DLINE_DL down left \u2534 LINE_HU horizontal up \u2569 DLINE_HU horizon \u252c LINE_HD horizontal down \u2566 DLINE_HD horizontal down \u251c LINE_VR vertical right \u2560 DLINE_VR vertical right \u2524 LINE_VL vertical left \u2563 DLINE_VL vertical left \u253c LINE_HV horizontal vertical \u256c DLINE_HV horizontal vertical DOTTED_B blank | SLINE small line \u2591 DOTTED_L low \u00a6 BLINE breaked line \u2592 DOTTED_M medium \u2584 SQUARE_D square down \u2593 DOTTED_H high \u2580 SQUARE_U square up \u2588 DOTTED_F full \u25a0 SQUARE_M square middle Take me back to cursor .","title":"Cursor symbols"},{"location":"wiki/constants/#cursor-symbols","text":"The cursor symbols replace some of the most used ascii ordinals with constants. You can use this list instead of writing a ordinal ascii number. The common keyboard symbols are omitted, they can be used as characters in single quotation marks 'A' or '#' . Some special symbols are not included, for example letters from national alphabet \u00e6 and other symbols like ordinal indicator \u00aa . If you don't find your favorite ASCII symbol , add in your code a new integer constant and set it to standard ASCII code number. Take me back to cursor .","title":"Cursor symbols"},{"location":"wiki/constants/#general-constants","text":"Char Constant Description Char Constant Description \u263a SMILE smile \u25b2 TRIANGLE_U up triangle \u263b SMILEY smile \u25bc TRIANGLE_D down triangle \u2665 CARD_H hearts \u25ba TRIANGLE_R right triangle \u2666 CARD_D diamonds \u25c4 TRIANGLE_L left triangle \u2663 CARD_C clubs \u2191 ARROW_U up arrow \u2660 CARD_S spades \u2193 ARROW_D down arrow \u2022 BULLET bullet \u2192 ARROW_R right arrow \u25d8 HOLE bullet hole \u2190 ARROW_L left arrow \u25cb CIRCLE circle \u2195 ARROW_UD up and down arrow \u25d9 CHOLE circle hole \u2194 ARROW_LR left and right arrow \u263c SUN two notes \u21a8 ARROW_EN end arrow \u2642 MALE male \u25ac RECTANGLE rectangle \u2640 FEMALE female \u00a7 SECTION section sign \u266a NOTE single note \u00b6 PARAGRAPH paragraph sign \u266b MUSIC two notes \u203c IMPORTANT exclamation marks","title":"General constants"},{"location":"wiki/constants/#mathematical-symbols","text":"Char Constant Description Char Constant Description + MATH_PL plus sign @ SGN_AT at sign - MATH_MI minus sign \u00ae SGN_TR trademark \u00d7 MATH_ML multiplication \u00a9 SGN_CPY copyright \u00f7 MATH_DI division $ CURR_D dollar sign \u00b1 MATH_PM plus minus \u00a5 CURR_Y yen sign \u00ac MATH_NT negation \u00a3 CURR_P pound sign \u00ad\u2261 MATH_TB triple bar \u00a2 CURR_C cent sign \u0192 MATH_FN function \u00a4 CURR_A any currency \u00b0 MATH_DG degree ~ TILDE tilde \u00f8 MATH_ES empty set \u00af UPPER upperscore \u00d8 MATH_ZR slashed zero _ UNDER underscore / SLASH fraction slash \u2017 DUNDER double unders \\ BSLASH backslash \u00ab LQUOTE quotation left \u2302 HOME home button \u00bb RQUOTE quotation right","title":"Mathematical symbols"},{"location":"wiki/constants/#box-drawing-characters","text":"Char Constant Description Char Constant Description \u2500 LINE_H horizontal \u2550 DLINE_H horizontal \u2502 LINE_V vertical \u2551 DLINE_V vertical \u2510 LINE_UR up right \u2557 DLINE_UR up right \u250c LINE_UL up left \u2554 DLINE_UL up left \u2518 LINE_DR down right \u255d DLINE_DR down right \u2514 LINE_DL down left \u255a DLINE_DL down left \u2534 LINE_HU horizontal up \u2569 DLINE_HU horizon \u252c LINE_HD horizontal down \u2566 DLINE_HD horizontal down \u251c LINE_VR vertical right \u2560 DLINE_VR vertical right \u2524 LINE_VL vertical left \u2563 DLINE_VL vertical left \u253c LINE_HV horizontal vertical \u256c DLINE_HV horizontal vertical DOTTED_B blank | SLINE small line \u2591 DOTTED_L low \u00a6 BLINE breaked line \u2592 DOTTED_M medium \u2584 SQUARE_D square down \u2593 DOTTED_H high \u2580 SQUARE_U square up \u2588 DOTTED_F full \u25a0 SQUARE_M square middle Take me back to cursor .","title":"Box drawing characters"},{"location":"wiki/cursor/","text":"Cursor Cursor writes in console window all text. You can change its position and color. Table of Set functions bool setPosition(int x, int y) bool setColor(Color foreground, Color background=CURRENT) bool setFontSize(int size) bool setFontChars(int columns, int rows) bool setFontPixels(int width, int height) Table of Printing functions bool printChar(int x, int y, int character, Color color=CURRENT) bool printBlank(int x, int y) bool clearScreen() Table of Get functions int getX() int getY() int getColorForeground() int getColorBackground() int getFontWidth() int getFontHeight() Information Position The position of cursor is the most important information of the console window. It is used every time you write a text. It is changed automatically but setting it manually provides a useful custom functionality. The unit of position is a single character . You set position of cursor by calling a function with specified number of columns and rows . The top left corner of the window is marked as [0,0] or more precisely columns = 0 and rows = 0 . The opposite bottom right corner is obtained using Window functions. The character count of the window tells you many characters you can write in the current console without. Characters are not screen pixels . The actual character size in pixels depends on many factors including screen size and font size . The default value is about 16\u00d724 pixels large. Check out window information for more information. Color Cursor color can be used to highlight different texts and to make simple graphics. There are 16 different colors to choose from. They are defined in as an integer enumeration called Color . This means you use Color constants only by their name without using object notation. Color Constant HEX value Color Constant HEX value BLACK #0c0c0c GRAY #767676 BLUE #0037da LIGHTBLUE #3b78ff GREEN #13a10e LIGHTGREEN #16c60c CYAN #3a96dd LIGHTCYAN #61d6d6 RED #c50f1f LIGHTRED #e74856 MAGENTA #881798 LIGHTMAGENTA #b4009e YELLOW #c19c00 LIGHTYELLOW #f9f1a5 LIGHTGRAY #cccccc WHITE #f2f2f2 CURRENT is a special type of color. It is the color which is at the moment in use. Font Font is the size of one character. You can't have a characters of different sizes. Setting font size changes all text in console therefore should be called at the start of the application. You can use a text based ASCII Art generator for fancy text headers. Do not forget to add appropriate escape characters. Change all \\ to \\\\ . A good practice is to change a font size only at the start of an application after resizing a window. When setting a new font size you should be using a setFontSize() or setFontChars() . These functions change font size in respect of the console window size. using namespace std; // use standard library input and output cout << \" _____ _____ _____ _______ _________ _____ \" << endl; cout << \" /\\\\ / ____|_ _|_ _| / ____\\\\ \\\\ / /__ __|_ _| \" << endl; cout << \" / \\\\ | | | | | | | (___ \\\\ \\\\ /\\\\ / / | | | | \" << endl; cout << \" / /\\\\ \\\\| | | | | | \\\\___ \\\\ \\\\ \\\\/ \\\\/ / | | | |\" << endl; cout << \" / ____ \\\\ |____ _| |_ _| |_ ____) | \\\\ /\\\\ / | | _| |_ \" << endl; cout << \"/_/ \\\\_\\\\_____|_____|_____| |_____/ \\\\/ \\\\/ |_| |_____| \" << endl; Examples The cursor position indicates where text is going to be written. Top of the screen window is position [0,0]. You can use a specific char in two single quotes ('A') or a number in range <0,255>. You can use print any character from normal ascii table with quotation marks. Cursor.setPosition(2,5); std::cout << \"Hello\"; Cursor.printBlank(3,8); std::cout << 'Z'; To print a character from extended ascii table you can use its standard code. Cursor.printChar(5,7,158); std::cout << (char) 158; printf(\"%c\", 158); These are examples where you can use colors Cursor.setColor(YELLOW); Cursor.setColor(MAGENTA, LIGHTCYAN); Cursor.printChar(12, 3, 'D', GREEN); Window.setColor(BLACK, WHITE); Constants This feature is going to be available in the next update, you can't use it right now. You can use following list of constants in replacement of standard ASCII ordinals. Char Constant Char Constant \u263a SMILE \u25b2 TRIANGLE_U \u263b SMILEY \u25bc TRIANGLE_D \u2665 CARD_H \u25ba TRIANGLE_R \u2666 CARD_D \u25c4 TRIANGLE_L \u2663 CARD_C \u2191 ARROW_U \u2660 CARD_S \u2193 ARROW_D \u2022 BULLET \u2192 ARROW_R \u25d8 HOLE \u2190 ARROW_L \u25cb CIRCLE \u2195 ARROW_UD \u25d9 RHOLE \u2194 ARROW_LR \u263c SUN \u21a8 ARROW_EN \u2642 MALE \u25ac RECTANGLE \u2640 FEMALE \u00a7 SECTION \u266a NOTE \u00b6 PARAGRAPH \u266b MUSIC \u203c IMPORTANT For more symbols, visit SYMBOLS Following example writes colorful Hello world on screen on specified position. Cursor.setPosition(5,2); Cursor.setColor(YELLOW); std::cout << \"Hello world!\" << std::endl; Functions Table of Set functions bool setPosition(int x, int y) bool setColor(Color foreground, Color background=CURRENT) bool setFontSize(int size) bool setFontPixels(int width, int height) bool setFontChars(int columns, int rows) Table of Printing functions bool printChar(int x, int y, int character, Color color=CURRENT) bool printBlank(int x, int y) bool clearScreen() Table of Get functions int getX() int getY() int getColorForeground() int getColorBackground() int getFontWidth() int getFontHeight() bool setPosition(int x, int y) This function sets the position of cursor. When you call any standard function to print a text, first character will be on the set position. Next characters will continue right and down. The cursor position will not change if given position is outside the console window. Parameters int x - position in columns int y - position in rows Return value Return type is bool . Return value is true if position was set successfully or position is outside the console window. Return value is false if unexpected error occurs. Example This is example sets the cursor position to coordinates [12, 8] and writes there using C++ standard output, printf and putchar. Cursor.setPosition(12, 8); std::cout << \"Hello \"; printf(\"world\"); putchar('!'); bool setColor(Color foreground, Color background=CURRENT) This function sets the color of cursor. It changes the foreground color of the printed characters and optionally you can also specify a background color. This function doesn't change already written characters (you can use Window.setColor for that). Parameters Color foreground - any Color constant Color background - (optional) any Color , default is CURRENT Return value Return type is bool . Return value is true if color was set successfully, false if error occurs. Example This example writes two texts on the screen. First is a yellow text without specific background color, second is magenta text with light cyan background. Cursor.setColor(YELLOW); std::cout << \"Yellow text without background color\"; Cursor.setColor(MAGENTA, LIGHTCYAN); std::cout << \"Magenta text on light cyan background\"; bool setFontSize(int size) This function sets the height of characters in console. It calculates size proportionally to current screen size. It is the most convenient and easy way to set the font size. Setting font size changes all text in console. Parameters int size - new character height. Size 15 is approximately 1/50 of the console height. Return value Return type is bool . Return value is true if font was set successfully, false if error occurs. Example This example writes a text on screen with size of 28. Then it waits for user input. After user presses a key, it resizes the console size and adjusts the font size to new console size. Cursor.setFontSize(28); std::cout << \"Press a key to change the screen size...\" << std::endl; Keyboard.waitUser(); Window.setSizePixels(1280,720); Cursor.setFontSize(28); bool printChar(int x, int y, int character, Color color=CURRENT) This function prints one character on specified position. Additionally it can change a cursor color. To print a blank character you can use printBlank . To print more characters and strings use a setPosition and standard output. Parameters int x - position in columns int y - position in rows int character - any character or Symbol constant. Color color - (optional) any Color constant, default is CURRENT Return value Return type is bool . Return value is true if everything works, false if error occurs. Example This is example writes a card symbol on specified position. Then it writes W letter if W key was pressed and hides it after release. Cursor.printChar(3, 2, CARD_S, LIGHTBLUE); if (Keyboard.getPressed('W')) { Cursor.printChar(11, 5, 'W'); } if (Keyboard.getReleased('W')) { Cursor.printBlank(11, 5); }","title":"Cursor"},{"location":"wiki/cursor/#cursor","text":"Cursor writes in console window all text. You can change its position and color. Table of Set functions bool setPosition(int x, int y) bool setColor(Color foreground, Color background=CURRENT) bool setFontSize(int size) bool setFontChars(int columns, int rows) bool setFontPixels(int width, int height) Table of Printing functions bool printChar(int x, int y, int character, Color color=CURRENT) bool printBlank(int x, int y) bool clearScreen() Table of Get functions int getX() int getY() int getColorForeground() int getColorBackground() int getFontWidth() int getFontHeight()","title":"Cursor"},{"location":"wiki/cursor/#information","text":"","title":"Information"},{"location":"wiki/cursor/#position","text":"The position of cursor is the most important information of the console window. It is used every time you write a text. It is changed automatically but setting it manually provides a useful custom functionality. The unit of position is a single character . You set position of cursor by calling a function with specified number of columns and rows . The top left corner of the window is marked as [0,0] or more precisely columns = 0 and rows = 0 . The opposite bottom right corner is obtained using Window functions. The character count of the window tells you many characters you can write in the current console without. Characters are not screen pixels . The actual character size in pixels depends on many factors including screen size and font size . The default value is about 16\u00d724 pixels large. Check out window information for more information.","title":"Position"},{"location":"wiki/cursor/#color","text":"Cursor color can be used to highlight different texts and to make simple graphics. There are 16 different colors to choose from. They are defined in as an integer enumeration called Color . This means you use Color constants only by their name without using object notation. Color Constant HEX value Color Constant HEX value BLACK #0c0c0c GRAY #767676 BLUE #0037da LIGHTBLUE #3b78ff GREEN #13a10e LIGHTGREEN #16c60c CYAN #3a96dd LIGHTCYAN #61d6d6 RED #c50f1f LIGHTRED #e74856 MAGENTA #881798 LIGHTMAGENTA #b4009e YELLOW #c19c00 LIGHTYELLOW #f9f1a5 LIGHTGRAY #cccccc WHITE #f2f2f2 CURRENT is a special type of color. It is the color which is at the moment in use.","title":"Color"},{"location":"wiki/cursor/#font","text":"Font is the size of one character. You can't have a characters of different sizes. Setting font size changes all text in console therefore should be called at the start of the application. You can use a text based ASCII Art generator for fancy text headers. Do not forget to add appropriate escape characters. Change all \\ to \\\\ . A good practice is to change a font size only at the start of an application after resizing a window. When setting a new font size you should be using a setFontSize() or setFontChars() . These functions change font size in respect of the console window size. using namespace std; // use standard library input and output cout << \" _____ _____ _____ _______ _________ _____ \" << endl; cout << \" /\\\\ / ____|_ _|_ _| / ____\\\\ \\\\ / /__ __|_ _| \" << endl; cout << \" / \\\\ | | | | | | | (___ \\\\ \\\\ /\\\\ / / | | | | \" << endl; cout << \" / /\\\\ \\\\| | | | | | \\\\___ \\\\ \\\\ \\\\/ \\\\/ / | | | |\" << endl; cout << \" / ____ \\\\ |____ _| |_ _| |_ ____) | \\\\ /\\\\ / | | _| |_ \" << endl; cout << \"/_/ \\\\_\\\\_____|_____|_____| |_____/ \\\\/ \\\\/ |_| |_____| \" << endl;","title":"Font"},{"location":"wiki/cursor/#examples","text":"The cursor position indicates where text is going to be written. Top of the screen window is position [0,0]. You can use a specific char in two single quotes ('A') or a number in range <0,255>. You can use print any character from normal ascii table with quotation marks. Cursor.setPosition(2,5); std::cout << \"Hello\"; Cursor.printBlank(3,8); std::cout << 'Z'; To print a character from extended ascii table you can use its standard code. Cursor.printChar(5,7,158); std::cout << (char) 158; printf(\"%c\", 158); These are examples where you can use colors Cursor.setColor(YELLOW); Cursor.setColor(MAGENTA, LIGHTCYAN); Cursor.printChar(12, 3, 'D', GREEN); Window.setColor(BLACK, WHITE);","title":"Examples"},{"location":"wiki/cursor/#constants","text":"This feature is going to be available in the next update, you can't use it right now. You can use following list of constants in replacement of standard ASCII ordinals. Char Constant Char Constant \u263a SMILE \u25b2 TRIANGLE_U \u263b SMILEY \u25bc TRIANGLE_D \u2665 CARD_H \u25ba TRIANGLE_R \u2666 CARD_D \u25c4 TRIANGLE_L \u2663 CARD_C \u2191 ARROW_U \u2660 CARD_S \u2193 ARROW_D \u2022 BULLET \u2192 ARROW_R \u25d8 HOLE \u2190 ARROW_L \u25cb CIRCLE \u2195 ARROW_UD \u25d9 RHOLE \u2194 ARROW_LR \u263c SUN \u21a8 ARROW_EN \u2642 MALE \u25ac RECTANGLE \u2640 FEMALE \u00a7 SECTION \u266a NOTE \u00b6 PARAGRAPH \u266b MUSIC \u203c IMPORTANT For more symbols, visit SYMBOLS Following example writes colorful Hello world on screen on specified position. Cursor.setPosition(5,2); Cursor.setColor(YELLOW); std::cout << \"Hello world!\" << std::endl;","title":"Constants"},{"location":"wiki/cursor/#functions","text":"Table of Set functions bool setPosition(int x, int y) bool setColor(Color foreground, Color background=CURRENT) bool setFontSize(int size) bool setFontPixels(int width, int height) bool setFontChars(int columns, int rows) Table of Printing functions bool printChar(int x, int y, int character, Color color=CURRENT) bool printBlank(int x, int y) bool clearScreen() Table of Get functions int getX() int getY() int getColorForeground() int getColorBackground() int getFontWidth() int getFontHeight()","title":"Functions"},{"location":"wiki/cursor/#bool-setpositionint-x-int-y","text":"This function sets the position of cursor. When you call any standard function to print a text, first character will be on the set position. Next characters will continue right and down. The cursor position will not change if given position is outside the console window. Parameters int x - position in columns int y - position in rows Return value Return type is bool . Return value is true if position was set successfully or position is outside the console window. Return value is false if unexpected error occurs. Example This is example sets the cursor position to coordinates [12, 8] and writes there using C++ standard output, printf and putchar. Cursor.setPosition(12, 8); std::cout << \"Hello \"; printf(\"world\"); putchar('!');","title":"bool setPosition(int x, int y)"},{"location":"wiki/cursor/#bool-setcolorcolor-foreground-color-backgroundcurrent","text":"This function sets the color of cursor. It changes the foreground color of the printed characters and optionally you can also specify a background color. This function doesn't change already written characters (you can use Window.setColor for that). Parameters Color foreground - any Color constant Color background - (optional) any Color , default is CURRENT Return value Return type is bool . Return value is true if color was set successfully, false if error occurs. Example This example writes two texts on the screen. First is a yellow text without specific background color, second is magenta text with light cyan background. Cursor.setColor(YELLOW); std::cout << \"Yellow text without background color\"; Cursor.setColor(MAGENTA, LIGHTCYAN); std::cout << \"Magenta text on light cyan background\";","title":"bool setColor(Color foreground, Color background=CURRENT)"},{"location":"wiki/cursor/#bool-setfontsizeint-size","text":"This function sets the height of characters in console. It calculates size proportionally to current screen size. It is the most convenient and easy way to set the font size. Setting font size changes all text in console. Parameters int size - new character height. Size 15 is approximately 1/50 of the console height. Return value Return type is bool . Return value is true if font was set successfully, false if error occurs. Example This example writes a text on screen with size of 28. Then it waits for user input. After user presses a key, it resizes the console size and adjusts the font size to new console size. Cursor.setFontSize(28); std::cout << \"Press a key to change the screen size...\" << std::endl; Keyboard.waitUser(); Window.setSizePixels(1280,720); Cursor.setFontSize(28);","title":"bool setFontSize(int size)"},{"location":"wiki/cursor/#bool-printcharint-x-int-y-int-character-color-colorcurrent","text":"This function prints one character on specified position. Additionally it can change a cursor color. To print a blank character you can use printBlank . To print more characters and strings use a setPosition and standard output. Parameters int x - position in columns int y - position in rows int character - any character or Symbol constant. Color color - (optional) any Color constant, default is CURRENT Return value Return type is bool . Return value is true if everything works, false if error occurs. Example This is example writes a card symbol on specified position. Then it writes W letter if W key was pressed and hides it after release. Cursor.printChar(3, 2, CARD_S, LIGHTBLUE); if (Keyboard.getPressed('W')) { Cursor.printChar(11, 5, 'W'); } if (Keyboard.getReleased('W')) { Cursor.printBlank(11, 5); }","title":"bool printChar(int x, int y, int character, Color color=CURRENT)"},{"location":"wiki/keyboard/","text":"Keyboard Functions of Keyboard focus on getting input from keyboard and mouse keys. There are also some functions that slow the program in order to make it more user friendly. Table of Functions bool Keyboard.get(int key) bool Keyboard.getPressed(int key) bool Keyboard.getReleased(int key) bool Keyboard.wait(int ticks) bool Keyboard.waitUser() Information Functions of Keyboard focus on getting input from keyboard and mouse keys. There are also some functions that slow the program in order to make it more user friendly. Keyboard keys are integers. You can use characters 'C' to indicate keys. Other keys are mapped as virtual keys which are similar to integer constants. They are used without quotations like so VK_RETURN . The most common virtual keys are on the following table. Other keys can be found at microsoft docs . Virtual Key Description VK_UP Up arrow key VK_LEFT Left arrow key VK_RIGHT Right arrow key VK_DOWN Down arrow key VK_SPACE Spacebar VK_SHIFT Shift key VK_CONTROL Control key VK_MENU Alt key VK_CAPITAL Caps lock key VK_RETURN Enter key VK_ESCAPE Escape key VK_LBUTTON Left mouse button VK_RBUTTON Right mouse button VK_MBUTTON Middle mouse button Following examples show basic usage of the keyboard object. if (Keyboard.getPressed(VK_UP)) // UP arrow was pressed while (Keyboard.get('A')) // While 'A' key is down if (Keyboard.getReleased('1')) // '1' key is released Functions bool Keyboard.get(int key) This function tests if a keyboard key is currently down. It outputs true as long as the key is down. You can use a Keyboard.wait() to slow down a while statement. Parameters int - any virtual key or character. Return value Return type is bool . Return value is true , when key is currently down. Otherwise is false . Example First example gets current input of 'W' key. The second example is while loop that loops until the spacebar is pressed. if (Keyboard.get('W')) { ... } while (!Keyboard.get(VK_SPACE)) { ... } bool Keyboard.getPressed(int key) This function checks if a key was pressed since the last call. Keyboard getPressed outputs true only once when key is pressed. Afterwards output becomes false regardless of the key is down or not. To check current state of the keyboard use Keyboard.get() instead. Parameters int - any virtual key or character. Return value Return type is bool . Return value is true , when the key is currently down. Otherwise is false . Example This function is useful when detecting single click on the mouse. Following code checks when mouse left button is pressed and then it prints a red 'X' on the mouse position using a Cursor.printChar() . Checkout also Mouse.getColumns() and Mouse.getRows() for more information. while(!Keyboard.get(VK_ESCAPE)) { if (Keyboard.getPressed(VK_LBUTTON)) { int mx = Mouse.getColumns(); int my = Mouse.getRows(); Cursor.printChar(mx,my,'X',LIGHTRED); } } bool Keyboard.getReleased(int key) This function checks if a key was released since the last call. Keyboard getReleased outputs true only once when key is released. Afterwards output becomes false regardless of the key is up or not. To check current state of the keyboard use Keyboard.get() instead. Parameters int - any virtual key or character. Return value Return type is bool . Return value is true , when the key is currently down. Otherwise is false . Example This function can be used when clicking on menu buttons. Only when a key button is released the desired action will be executed. User can change their mind in the last moment. In the following example a code checks if an ENTER key was pressed. Then it Cursor.clearScreen() and based on a custom integer variable position chooses which action to take. if (Keyboard.getReleased(VK_RETURN)) { Cursor.clearScreen(); switch(position) { case 1: std::cout<<\"Starting a new project\"; break; case 2: std::cout<<\"Loading a saved project\"; break; } } bool Keyboard.wait(unsigned int ticks) This function slow downs program to specific number of ticks per second . If you want to stop the program until user presses a key use Keyboard.waitUser() instated. This function should be used in while statements to slow down their fast repeats. Furthermore, this function should be the last function in the while statement. Parameters unsigned int - ticks per second program should have. Passing a 0 doesn't stop program and negative numbers are converted to their positive counterparts. Unsigned int is integer without the plus or minus sign, therefore passing a negative number is the same as passing the same positive number. Return value Return type is bool . The output is true when ticks are not zero. Example It can be used in games to slow down movement of player on the screen. It can also be used in menus to slow down fast scrolling using keyboard keys. This example can be used in a game to move an player 30 times per second. while(!Keyboard.get(VK_ESCAPE)) { if (keyboard.get(VK_LEFT)) { x--; } if (keyboard.get(VK_RIGHT)) { x++; } if (keyboard.get(VK_UP)) { y--; } if (keyboard.get(VK_DOWN)) { y++; } Keyboard.wait(30); } bool Keyboard.waitUser() This function stops the application until user presses any button. Releasing a button doesn't trigger this function. If you want to slow downs program to specific number of ticks per second use Keyboard.wait() instead. This function is used to stop a program from continuing until a user presses a button. Parameters This function doesn't require any parameters. Return value Return type is bool . The output is true if all the functions were executed correctly. When error occurs return value is false . Example Following example writes information on screen and waits until user presses any button. After pressing a button the function Cursor.clearScreen() is used. std::cout << \"That's all from the keyboard object!\" << std::endl; std::cout << \"Press any key to continue...\" << std::endl; Keyboard.waitUser(); Cursor.clearScreen();","title":"Keyboard"},{"location":"wiki/keyboard/#keyboard","text":"Functions of Keyboard focus on getting input from keyboard and mouse keys. There are also some functions that slow the program in order to make it more user friendly. Table of Functions bool Keyboard.get(int key) bool Keyboard.getPressed(int key) bool Keyboard.getReleased(int key) bool Keyboard.wait(int ticks) bool Keyboard.waitUser()","title":"Keyboard"},{"location":"wiki/keyboard/#information","text":"Functions of Keyboard focus on getting input from keyboard and mouse keys. There are also some functions that slow the program in order to make it more user friendly. Keyboard keys are integers. You can use characters 'C' to indicate keys. Other keys are mapped as virtual keys which are similar to integer constants. They are used without quotations like so VK_RETURN . The most common virtual keys are on the following table. Other keys can be found at microsoft docs . Virtual Key Description VK_UP Up arrow key VK_LEFT Left arrow key VK_RIGHT Right arrow key VK_DOWN Down arrow key VK_SPACE Spacebar VK_SHIFT Shift key VK_CONTROL Control key VK_MENU Alt key VK_CAPITAL Caps lock key VK_RETURN Enter key VK_ESCAPE Escape key VK_LBUTTON Left mouse button VK_RBUTTON Right mouse button VK_MBUTTON Middle mouse button Following examples show basic usage of the keyboard object. if (Keyboard.getPressed(VK_UP)) // UP arrow was pressed while (Keyboard.get('A')) // While 'A' key is down if (Keyboard.getReleased('1')) // '1' key is released","title":"Information"},{"location":"wiki/keyboard/#functions","text":"","title":"Functions"},{"location":"wiki/keyboard/#bool-keyboardgetint-key","text":"This function tests if a keyboard key is currently down. It outputs true as long as the key is down. You can use a Keyboard.wait() to slow down a while statement. Parameters int - any virtual key or character. Return value Return type is bool . Return value is true , when key is currently down. Otherwise is false . Example First example gets current input of 'W' key. The second example is while loop that loops until the spacebar is pressed. if (Keyboard.get('W')) { ... } while (!Keyboard.get(VK_SPACE)) { ... }","title":"bool Keyboard.get(int key)"},{"location":"wiki/keyboard/#bool-keyboardgetpressedint-key","text":"This function checks if a key was pressed since the last call. Keyboard getPressed outputs true only once when key is pressed. Afterwards output becomes false regardless of the key is down or not. To check current state of the keyboard use Keyboard.get() instead. Parameters int - any virtual key or character. Return value Return type is bool . Return value is true , when the key is currently down. Otherwise is false . Example This function is useful when detecting single click on the mouse. Following code checks when mouse left button is pressed and then it prints a red 'X' on the mouse position using a Cursor.printChar() . Checkout also Mouse.getColumns() and Mouse.getRows() for more information. while(!Keyboard.get(VK_ESCAPE)) { if (Keyboard.getPressed(VK_LBUTTON)) { int mx = Mouse.getColumns(); int my = Mouse.getRows(); Cursor.printChar(mx,my,'X',LIGHTRED); } }","title":"bool Keyboard.getPressed(int key)"},{"location":"wiki/keyboard/#bool-keyboardgetreleasedint-key","text":"This function checks if a key was released since the last call. Keyboard getReleased outputs true only once when key is released. Afterwards output becomes false regardless of the key is up or not. To check current state of the keyboard use Keyboard.get() instead. Parameters int - any virtual key or character. Return value Return type is bool . Return value is true , when the key is currently down. Otherwise is false . Example This function can be used when clicking on menu buttons. Only when a key button is released the desired action will be executed. User can change their mind in the last moment. In the following example a code checks if an ENTER key was pressed. Then it Cursor.clearScreen() and based on a custom integer variable position chooses which action to take. if (Keyboard.getReleased(VK_RETURN)) { Cursor.clearScreen(); switch(position) { case 1: std::cout<<\"Starting a new project\"; break; case 2: std::cout<<\"Loading a saved project\"; break; } }","title":"bool Keyboard.getReleased(int key)"},{"location":"wiki/keyboard/#bool-keyboardwaitunsigned-int-ticks","text":"This function slow downs program to specific number of ticks per second . If you want to stop the program until user presses a key use Keyboard.waitUser() instated. This function should be used in while statements to slow down their fast repeats. Furthermore, this function should be the last function in the while statement. Parameters unsigned int - ticks per second program should have. Passing a 0 doesn't stop program and negative numbers are converted to their positive counterparts. Unsigned int is integer without the plus or minus sign, therefore passing a negative number is the same as passing the same positive number. Return value Return type is bool . The output is true when ticks are not zero. Example It can be used in games to slow down movement of player on the screen. It can also be used in menus to slow down fast scrolling using keyboard keys. This example can be used in a game to move an player 30 times per second. while(!Keyboard.get(VK_ESCAPE)) { if (keyboard.get(VK_LEFT)) { x--; } if (keyboard.get(VK_RIGHT)) { x++; } if (keyboard.get(VK_UP)) { y--; } if (keyboard.get(VK_DOWN)) { y++; } Keyboard.wait(30); }","title":"bool Keyboard.wait(unsigned int ticks)"},{"location":"wiki/keyboard/#bool-keyboardwaituser","text":"This function stops the application until user presses any button. Releasing a button doesn't trigger this function. If you want to slow downs program to specific number of ticks per second use Keyboard.wait() instead. This function is used to stop a program from continuing until a user presses a button. Parameters This function doesn't require any parameters. Return value Return type is bool . The output is true if all the functions were executed correctly. When error occurs return value is false . Example Following example writes information on screen and waits until user presses any button. After pressing a button the function Cursor.clearScreen() is used. std::cout << \"That's all from the keyboard object!\" << std::endl; std::cout << \"Press any key to continue...\" << std::endl; Keyboard.waitUser(); Cursor.clearScreen();","title":"bool Keyboard.waitUser()"},{"location":"wiki/mouse/","text":"Mouse Mouse object is used to get position of mouse in screen. Table of Functions bool Mouse.getX() bool Mouse.getX() bool Mouse.getColumns() bool Mouse.getRows() Information Mouse object is used only to detect position of mouse. To detect a mouse keys use keyboard object and virtual keys VK_LBUTTON , VK_RBUTTON and VK_MBUTTON . Mouse can be used as following example. int mx = Mouse.getColumns(); int my = Mouse.getRows(); if (Keyboard.get(VK_LBUTTON)) Cursor.printChar(mx, my, 'M') Functions int Mouse.getX() This function returns the position of mouse in console window. The position is in pixels. This function tests if a keyboard key is currently down. It outputs true as long as the key is down. You can use a Keyboard.wait() to slow down a while statement. Parameters int - pixel po Return value Return type is int . It is the pixel position relative to console window. Function returns negatives, when mouse position is is outside console window on the left. The function also returns larger numbers than the screen width if the mouse is outside console window on the right. Example First example gets current input of 'W' key. The second example is while loop that loops until the spacebar is pressed. if (Keyboard.get('W')) { ... } while (!Keyboard.get(VK_SPACE)) { ... }","title":"Mouse"},{"location":"wiki/mouse/#mouse","text":"Mouse object is used to get position of mouse in screen. Table of Functions bool Mouse.getX() bool Mouse.getX() bool Mouse.getColumns() bool Mouse.getRows()","title":"Mouse"},{"location":"wiki/mouse/#information","text":"Mouse object is used only to detect position of mouse. To detect a mouse keys use keyboard object and virtual keys VK_LBUTTON , VK_RBUTTON and VK_MBUTTON . Mouse can be used as following example. int mx = Mouse.getColumns(); int my = Mouse.getRows(); if (Keyboard.get(VK_LBUTTON)) Cursor.printChar(mx, my, 'M')","title":"Information"},{"location":"wiki/mouse/#functions","text":"","title":"Functions"},{"location":"wiki/mouse/#int-mousegetx","text":"This function returns the position of mouse in console window. The position is in pixels. This function tests if a keyboard key is currently down. It outputs true as long as the key is down. You can use a Keyboard.wait() to slow down a while statement. Parameters int - pixel po Return value Return type is int . It is the pixel position relative to console window. Function returns negatives, when mouse position is is outside console window on the left. The function also returns larger numbers than the screen width if the mouse is outside console window on the right. Example First example gets current input of 'W' key. The second example is while loop that loops until the spacebar is pressed. if (Keyboard.get('W')) { ... } while (!Keyboard.get(VK_SPACE)) { ... }","title":"int Mouse.getX()"},{"location":"wiki/window/","text":"Window Window object is used to get and set console window size and its properties. Table of Set functions bool setSizeChars(int columns, int rows) bool setSizePixels(int width, int height) bool setPositionPixels(int x, int y) bool setFullscreenWindow() bool setFullscreenBorderless() bool setColor(Color foreground, Color background) bbool setTitle(std::string title) Table of Printing functions bool showBlinking() bool showSelection() bool showScrollbars(int columns, int rows) bool hideBlinking() bool hideSelection() bool hideScrollbars() Table of Get functions int getX() int getY() int getWidth() int getHeight() int getRows() int getBarHeight() int getScreenWidth() int getScreenHeight() Information First we have to understand the difference between console window or simply console and screen. Console is an application used to run commands and executable files. Screen is the full size of working area on monitor. The position and size of console window can be changed by user or by code itself. You can use functions below to get and set these properties exactly. The console window and screen size can be different for each user. To publish an application you have to count for different screen sizes. The easiest solution is to use Window.setFullscreenBorderless() and Cursor.setFontChars . The first function sets the console size to match the screen size and the second function adjusts cursor font to a given number of characters in columns and rows. Window can be used as following example. Window.setFullscreenBorderless(); middle = Window.getColumns()/2; center = Window.getRows()/2;","title":"Window"},{"location":"wiki/window/#window","text":"Window object is used to get and set console window size and its properties. Table of Set functions bool setSizeChars(int columns, int rows) bool setSizePixels(int width, int height) bool setPositionPixels(int x, int y) bool setFullscreenWindow() bool setFullscreenBorderless() bool setColor(Color foreground, Color background) bbool setTitle(std::string title) Table of Printing functions bool showBlinking() bool showSelection() bool showScrollbars(int columns, int rows) bool hideBlinking() bool hideSelection() bool hideScrollbars() Table of Get functions int getX() int getY() int getWidth() int getHeight() int getRows() int getBarHeight() int getScreenWidth() int getScreenHeight()","title":"Window"},{"location":"wiki/window/#information","text":"First we have to understand the difference between console window or simply console and screen. Console is an application used to run commands and executable files. Screen is the full size of working area on monitor. The position and size of console window can be changed by user or by code itself. You can use functions below to get and set these properties exactly. The console window and screen size can be different for each user. To publish an application you have to count for different screen sizes. The easiest solution is to use Window.setFullscreenBorderless() and Cursor.setFontChars . The first function sets the console size to match the screen size and the second function adjusts cursor font to a given number of characters in columns and rows. Window can be used as following example. Window.setFullscreenBorderless(); middle = Window.getColumns()/2; center = Window.getRows()/2;","title":"Information"}]}